feat: 4단계 완료 - 실전 운영 준비 (CLI, 로깅, 설정)

## 주요 구현사항

### 1. CLI 인터페이스 (pc/cli.py)
- update 명령: 데이터 업데이트
- backtest 명령: 백테스트 실행 및 리포트 생성
- scan 명령: 매매 신호 스캔 및 상위 N개 추출
- argparse 기반 명령행 인터페이스

### 2. 로깅 시스템 (infra/logging/setup.py)
- 구조화된 로깅 (시간, 레벨, 메시지)
- 파일 로깅 (일별 로그, 30일 보관, 10MB 로테이션)
- 로그 컨텍스트 매니저 (작업 시작/완료 자동 로깅)
- 함수 호출 로깅 데코레이터

### 3. 설정 관리 (config/config.yaml, infra/config/loader.py)
- YAML 기반 설정 파일
- 환경 변수 덮어쓰기 지원
- 데이터, 백테스트, 전략, 리스크 설정
- 로깅, 알림, 스케줄 설정

### 4. 데이터 로더 개선 (infra/data/loader.py)
- load_price_data 함수 추가
- 캐시 기반 가격 데이터 로딩
- 날짜 필터링 지원

### 5. Integration Tests (tests/integration/test_production_ready.py)
- 설정 로딩 테스트
- 로깅 시스템 테스트
- CLI 도움말 테스트
- 디렉토리 구조 테스트
- 필수 파일 존재 테스트
- 설정 값 검증 테스트
- 모든 테스트 통과 (7/7 passed)

### 6. 버그 수정
- FutureWarning 제거 (resample 'M' → 'ME')
- 로깅 핸들러 명시적 닫기 (Windows 파일 잠금 문제)

## 테스트 현황
- ✅ 전체 테스트: 21/21 passed (워닝 0개)
- ✅ 데이터 파이프라인: 2/2 passed
- ✅ 전략 파이프라인: 6/6 passed
- ✅ 백테스트 파이프라인: 6/6 passed
- ✅ 실전 운영 준비: 7/7 passed

## 완료된 단계
- ✅ 1단계: 실전 데이터 연동
- ✅ 2단계: 전략 지표 확장
- ✅ 3단계: 백테스트 엔진 개발
- ✅ 4단계: 실전 운영 준비

## 사용 예시
```bash
# 데이터 업데이트
python pc/cli.py update --date auto

# 백테스트 실행
python pc/cli.py backtest --start 2024-01-01 --output reports/backtest_2024

# 매매 신호 스캔
python pc/cli.py scan --date auto --top-n 10 --output signals/today.csv
```

## 다음 단계
- 텔레그램 알림 연동
- 스케줄러 연동
- 파라미터 최적화
