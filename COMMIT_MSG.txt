feat: 5단계 완료 - 텔레그램 알림 및 NAS 자동화

## 주요 구현사항

### 1. CLI 텔레그램 통합 (pc/cli.py)
- scan 명령에 --notify 옵션 추가
- 매매 신호 자동 텔레그램 알림
- 마크다운 포맷 메시지 (신호, 신뢰도, 가격)

### 2. NAS 자동화 스크립트
- scripts/linux/jobs/daily_scan_notify.sh
  * 장마감 후 매매 신호 스캔 및 알림
  * 평일 18:00 실행
  * RC 기반 성공/실패 판정
  
- scripts/linux/jobs/weekly_backtest_report.sh
  * 주간 백테스트 실행 및 리포트 전송
  * 일요일 09:00 실행
  * 텔레그램으로 요약 리포트 전송
  
- scripts/linux/setup_cron.sh
  * Cron 작업 자동 설정 스크립트
  * 백업 및 설치 확인 기능

### 3. Cron 스케줄
- 평일 18:00: 장마감 신호 스캔 + 텔레그램 알림
- 일요일 09:00: 주간 백테스트 리포트
- 로그 파일 자동 생성 (logs/)

### 4. 문서화 (docs/TELEGRAM_SETUP.md)
- 텔레그램 봇 설정 가이드
- NAS 자동화 설정 가이드
- Cron 스케줄 설명
- 트러블슈팅 가이드

## 기존 구조 활용
- 기존 infra/notify/telegram.py 활용
- 기존 app/cli/alerts.py 참고
- secret/config.yaml 설정 방식 유지

## 사용 예시

### PC에서 테스트
```bash
# 매매 신호 스캔 + 텔레그램 알림
python pc/cli.py scan --date auto --notify --top-n 10
```

### NAS에서 자동화
```bash
# Cron 설정
bash scripts/linux/setup_cron.sh

# 수동 실행 테스트
bash scripts/linux/jobs/daily_scan_notify.sh

# 로그 확인
tail -f logs/daily_scan_*.log
```

## 완료된 단계
- ✅ 1단계: 실전 데이터 연동
- ✅ 2단계: 전략 지표 확장
- ✅ 3단계: 백테스트 엔진 개발
- ✅ 4단계: 실전 운영 준비
- ✅ 5단계: 텔레그램 알림 및 자동화

## 다음 단계
- 파라미터 최적화 (Optuna)
- 웹 대시보드 (선택)
